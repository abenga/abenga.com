{% extends "pages/post" %}

{% block abstract %}
<p><a href="http://www.gtk.org">GTK+</a> (acronym for the <em>GIMP Toolkit</em>) is a
library for creating graphical user interfaces. It works on many
UNIX-like platforms, Windows, and OS X.</p>
<p><a href="https://live.gnome.org/Vala/">Vala</a> is a new programming language that aims
to bring modern programming language features to GNOME developers without
imposing any additional runtime requirements and without using a different
ABI compared to applications and libraries written in C.</p>
{% endblock %}

{% block post_text %}
<h2>About GTK</h2>
<p><a href="http://www.gtk.org">GTK+</a> (acronym for the <em>GIMP Toolkit</em>) is a
library for creating graphical user interfaces. It works on many
UNIX-like platforms, Windows, and OS X.</p>
<p>It's called the GIMP toolkit because it was originally written for
developing the <a href="http://www.gimp.org">GNU Image Manipulation Program</a>
(GIMP), but GTK+ has now been used in a large number of software
projects, including the <a href="http://www.gnome.org">GNOME</a> project.</p>
<p>GTK+ is released under the
<a href="http://www.gnu.org/licenses/lgpl.html">GNU Library General Public License</a>
(GNU LGPL), which allows for flexible licensing of client applications. You can
develop open software, free software, or even commercial non-free software using
GTK+ without having to spend anything for licenses or royalties. GTK+ has a
C-based object-oriented architecture that allows for maximum flexibility.</p>
<p>Bindings for many other languages have been written, including
<a href="http://www.gtkmm.org/">C++</a>, <a href="https://code.google.com/p/obgtk/">Objective-C</a>,
<a href="http://www.gnu.org/software/guile-gtk/">Guile/Scheme</a>,
<a href="https://metacpan.org/module/Gtk3">Perl</a>, <a href="http://www.pygtk.org/">Python</a>,
TOM, Ada95, Free Pascal, Eiffel and <a href="https://live.gnome.org/Vala/">Vala</a>. This
tutorial describes the Vala interface to GTK.</p>
<p>GTK+ depends on the following libraries:</p>
<ul>
<li>
<p><strong>GLib</strong></p>
<p><a href="https://developer.gnome.org/glib/">GLib</a> is a general-purpose
utility library, not specific to graphical user interfaces. GLib
provides many useful data types, macros, type conversions, string
utilities, file utilities, a main loop abstraction, and so on.</p>
</li>
<li>
<p><strong>GObject</strong></p>
<p><a href="https://developer.gnome.org/gobject/stable/‎">GObject</a> is library that
provides a type system, a collection of fundamental types
including an object type, a signal system.GObject, and its lower-level
type system, GType, are used by GTK+ and most GNOME libraries to
provide Object-oriented C-based APIs and automatic transparent API
bindings to other compiled or interpreted languages.</p>
</li>
<li>
<p><strong>GIO</strong></p>
<p><a href="https://developer.gnome.org/gio/">GIO</a> is a modern, easy-to-use
Virtual File System API including abstractions for files, drives,
volumes, stream IO, as well as network programming and DBus
communication.</p>
<p>A virtual file system (VFS) or virtual filesystem switch is an
abstraction layer on top of a more concrete file system. The purpose of
a VFS is to allow client applications to access different types of
concrete file systems (Ext3, FAT, NTFS, etc) in a uniform way.</p>
</li>
<li>
<p><strong>Cairo</strong></p>
<p><a href="http://www.cairographics.org/‎">Cairo</a> is a 2D graphics library with
support for multiple output devices.</p>
</li>
<li>
<p><strong>Pango</strong></p>
<p><a href="http://pango.org">Pango</a> is a library for internationalized text
handling. It centers around the <code>PangoLayout</code> object, representing a
paragraph of text. Pango provides the engine for <code>Gtk.TextView</code>,
<code>Gtk.Label</code>, <code>Gtk.Entry</code>, and other widgets that display text.</p>
</li>
<li>
<p><strong>ATK</strong></p>
<p><a href="https://developer.gnome.org/atk/">ATK</a> is the Accessibility Toolkit.
It provides a set of generic interfaces allowing accessibility
technologies (technologies that allow people with physical disabilities,
e.g. blindness to use computers) to interact with a graphical user
interface. For example, a screen reader uses ATK to discover the text
in an interface and read it to blind users. GTK+ widgets have built-in
support for accessibility using the ATK framework.</p>
</li>
<li>
<p><strong>GdkPixbuf</strong></p>
<p><a href="https://developer.gnome.org/gdk-pixbuf/">GdkPixbuf</a> is a small library
which allows you to create GdkPixbuf ("pixel buffer") objects from
image data or image files. Use a GdkPixbuf in combination with
<code>Gtk.Image</code> to display images.</p>
</li>
<li>
<p><strong>GDK</strong></p>
<p><a href="https://developer.gnome.org/gdk/">GDK</a> is the abstraction layer that
allows GTK+ to support multiple windowing systems. GDK provides window
system facilities on X11, Windows, and OS X.</p>
</li>
</ul>
<p>GTK+ is essentially an object oriented application programming interface
(API). Although written completely in C, it is implemented using the
idea of classes and callback functions.</p>
<h2>About Vala</h2>
<p><a href="https://live.gnome.org/Vala/">Vala</a> is a new programming language that aims
to bring modern programming language features to GNOME developers without
imposing any additional runtime requirements and without using a different
ABI compared to applications and libraries written in C.</p>
<p>According to the <a href="https://wiki.gnome.org/Vala/Tutorial">Vala tutorial</a>:</p>
<div class="blockquote">
<p>Vala is a new programming language that allows modern programming techniques 
to be used to write applications that run on the GNOME runtime libraries, 
particularly GLib and GObject. This platform has long provided a very complete 
programming environment, with such features as a dynamic type system and 
assisted memory management. Before Vala, the only ways to program for the 
platform were with the machine native C API, which exposes a lot of often 
unwanted detail, with a high level language that has an attendant virtual 
machine, such as Python or the Mono C# language, or alternatively, with C++ 
through a wrapper library.</p>

<p>Vala is different from all these other techniques, as it outputs C code which 
can be compiled to run with no extra library support beyond the GNOME platform. 
This has several consequences, but most importantly:</p>

<ul>
<li>Programs written in Vala should have broadly similar performance to those 
  written directly in C, whilst being easier and faster to write and maintain.</li>
<li>A Vala application can do nothing that a C equivalent cannot. Whilst Vala 
  introduces a lot of language features that are not available in C, these are 
  all mapped to C constructs, although they are often ones that are difficult 
  or too time consuming to write directly.</li>
</ul>

<p>As such, whilst Vala is a modern language with all of the features you would 
expect, it gains its power from an existing platform, and must in some ways 
comply with the rules set down by it.</p>
</div>

<h2>References</h2>
<ul>
<li>
<p>The GTK+ 2.0 Tutorial: Introduction. [Online] Available from:
  <a href="https://developer.gnome.org/gtk-tutorial/2.90/c24.html">https://developer.gnome.org/gtk-tutorial/2.90/c24.html</a>
  [Accessed 16 September 2014]</p>
</li>
<li>
<p>The Vala Tutorial. [Online] Available from: 
  <a href="https://wiki.gnome.org/Projects/Vala/Tutorial">https://wiki.gnome.org/Projects/Vala/Tutorial</a> [Accessed: 16 September 2014] </p>
</li>
</ul>
{% endblock %}

{% block references %}
{% endblock %}
